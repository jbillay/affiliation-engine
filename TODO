Prerequisites
Node.js installed

OpenAI API Key

Set up a static site using GitHub Pages, Netlify, or similar

📦 Step 1: Install Required Packages
bash
Copy
Edit
npm init -y
npm install axios dotenv fs
Create a .env file:

env
Copy
Edit
OPENAI_API_KEY=your_openai_key_here
🧠 Step 2: Create generatePost.js
js
Copy
Edit
require('dotenv').config();
const axios = require('axios');
const fs = require('fs');
const path = require('path');

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const prompt = `
Write a 500-word SEO-optimized blog post titled "Top 5 Budget Wireless Earbuds for 2025".
Include at least one affiliate-style link in the text using this format: [Buy on Amazon](https://amzn.to/your-affiliate-link).
Make the tone helpful, friendly, and suitable for a tech blog.
`;

async function generateContent() {
  try {
    const res = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7,
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const content = res.data.choices[0].message.content;

    const filename = `blog-${new Date().toISOString().split('T')[0]}.md`;
    const filepath = path.join(__dirname, 'posts', filename);

    if (!fs.existsSync('posts')) fs.mkdirSync('posts');

    fs.writeFileSync(filepath, content);
    console.log(`✅ Blog post saved as ${filename}`);
  } catch (err) {
    console.error('❌ Error generating content:', err.message);
  }
}

generateContent();
🧪 Step 3: Run the Script
bash
Copy
Edit
node generatePost.js
Check the /posts folder—your Markdown blog post will be there!

🚀 Bonus: Automate Publishing (Optional)
GitHub Pages / Netlify: Set the posts/ folder to commit changes automatically and trigger site rebuild

Use GitHub Actions to automate committing the new post daily

You can also add a cron job using node-cron for daily generation

Would you like help setting this up with auto-publishing via GitHub Pages or integrating with a headless CMS like Strapi or Ghost?


2/2







You said:
can add the auto-publishing via GitHub Pages?


ChatGPT said:
Yes! Here's how you can automatically publish AI-generated content to a GitHub Pages site from your Node.js script using Git + GitHub Actions.

🚀 Overview: What You'll Set Up
A Node.js script that:

Generates Markdown content

Saves it to your repo

Commits & pushes changes to GitHub

A GitHub Pages site (using Jekyll, Hugo, or plain HTML)

A GitHub Action that runs this script daily (or on demand)

🧱 Step-by-Step Setup
✅ Step 1: Prepare Your Repo
Create a public GitHub repo

Add a folder structure for a Jekyll or Hugo site (or just static HTML)

Create a posts/ folder for AI content

Enable GitHub Pages:

Go to Settings > Pages

Choose main branch and root (or /docs) as your site source

📜 Step 2: Modify Node.js Script to Auto-Commit
Update generatePost.js to also commit and push to GitHub:

js
Copy
Edit
const { execSync } = require('child_process');
// ... previous OpenAI logic ...

function commitAndPush(filename) {
  try {
    execSync('git config user.email "bot@example.com"');
    execSync('git config user.name "AI Publisher Bot"');
    execSync(`git add posts/${filename}`);
    execSync(`git commit -m "🤖 New post: ${filename}"`);
    execSync('git push');
    console.log('✅ Post committed and pushed to GitHub');
  } catch (err) {
    console.error('❌ Git push failed:', err.message);
  }
}

// At the end of generateContent():
commitAndPush(filename);
Make sure your Git repo is already initialized and connected to GitHub with correct remote.

🤖 Step 3: Create GitHub Action for Daily Posting
In your repo, add a workflow file at .github/workflows/generate-post.yml:

yaml
Copy
Edit
name: Generate & Publish Blog Post

on:
  schedule:
    - cron: '0 8 * * *'  # runs daily at 08:00 UTC
  workflow_dispatch:    # allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Generate Blog Post
        run: node generatePost.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Push Changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add posts/
          git commit -m "Auto-generated post" || echo "No changes to commit"
          git push
🔐 Step 4: Add Your OpenAI API Key
Go to GitHub Repo > Settings > Secrets > Actions

Add a new secret:

Name: OPENAI_API_KEY

Value: Your OpenAI key

✅ Done!
Once set up:

Your bot will create a new affiliate blog post every day

It commits it to the repo

GitHub Pages rebuilds the site automatically